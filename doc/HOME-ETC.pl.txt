

	    Podkatalog 'etc' w katalogu domowym użytkownika 
			    
					    implementacja
					    
    

  1.	~/etc
  1.1	  Ja chcę ~/.etc
  2.	Co powinno się znaleźć w ~/etc/ ?
  3.	Wyjątki.
  4.	Zgodność.
  4.1     Ścieżki w plikach konfiguracyjnych.
  4.2	  Programy niezależne od środowiska użytkownika.
  5.	Algorytm uzyskiwania HOME_ETC w łatkach dla programów.
  6.	Inne konfigurowalne katalogi.
  7.	Prawa.
  8.	Przykładowy kod.
  9.	Biblioteka współdzielona.
  10.	Kontakt.
  11.	Autorzy.

1. ~/etc/

    Katalog ~/etc/ zaczyna być coraz bardziej potrzebny. W miarę jak powiększa
    się ilość zorientowanych na użytkownika aplikacji, w tym przede wszystkim
    aplikacji graficznych, narzędzi DTP i zorientowanych profilowo menedżerów
    okien, powiększa się ilość informacji konfiguracyjnych, które trzeba gdzieś
    przechowywać. W katalogach domowych użytkowników zaczyna w niebezpiecznym 
    tempie narastać ilość plików z kropką! Katalog domowy osoby używającej 
    wielu różnorodnych aplikacji wyglądać zaczyna jak skóra człowieka, który 
    dostał wysypki. Biedny katalog domowy...
    
    Ale na tym nie koniec. Niektóre aplikacje, jak np. 'qmail-local' z pakietu
    'qmail', pozwalają aby ich zachowanie było kontrolowane przez atrybuty
    katalogu zawierającego pliki konfiguracyjne użytkownika (czyli de facto jego 
    katalogu domowego). Co stanie się, jeśli dwa takie programy będą w danej
    chwili wymagały zmiany tych samych atrybutów katalogu domowego??

1.1 Ja chcę ~/.etc

    Niektórzy woleliby trzymać pliki konfiguracyjne w ~/.etc ; jeszcze inni
    w ~/conf... Radą na to jest takie przystosowanie programów, aby korzystały
    ze zmiennej środowiskowej $HOME_ETC mówiącej o lokalizacji ww. plików.
    Dla uproszczenia w dalszej części dokumentu będę nazywał ten katalog
    po prostu ~/etc, należy jednak mieć na uwadze, że chodzi tu o katalog
    z plikami konfiguracyjnymi, którego nazwa przechowywana jest właśnie w
    tej zmiennej środowiskowej.
    
    $HOME_ETC ma postać łańcucha będącego nazwą katalogu, w którym przechowywane są
    pliki konfiguracyne. Umieszczenie w tej zmiennej czegoś ponad to ma
    prawo powodować nieprzewidziane zachowanie programu. W $HOME_ETC jest dopuszczalne
    stosowanie tylko BEZWZGLĘDNEJ NAZWY ŚCIEŻKOWEJ KATALOGU.

    Przykład:

     HOME_ETC=/mojeetc
     
     co oznacza, że pliki konfiguracyjne mają być przechowywane w /mojeetc/

     HOME_ETC=/home/users/mojlogin/etc     
    
     co oznacza, że pliki konfiguracyjne mają być przechowywane
     w /home/users/mojlogin/etc     
    
    $HOME_ETC powinna być zdefiniowana w globalnym pliku konfiguracyjnym
    danej powłoki lub w szablonie plików konfiguracyjnych powłoki (np. w
    którymś z plików z katalogu /etc/skel/).
    
2. Co powinno się znaleźć w ~/etc/ ?

    W katalogu ~/etc/ powinny znaleźć się wszystkie pliki konfiguracyjne
    aplikacji, które tworzą je dla poszczególnych użytkowników, a które
    wcześniej przechowywane były w ~/.nazwapliku
    
    Aplikacje, które wymagają istnienia więcej niż jednego pliku 
    konfiguracyjnego powinny posiadać swoje własne podkatalogi wewnątrz HOME_ETC
    Nazwy plików powinny zaczynać się kropką.
    
    PRZYKŁADY:
    
    ~/etc/pinerc
    ~/etc/ssh/
    ~/etc/qmail/
    ~/etc/qmail/qmail-default
    ~/etc/pinforc
    
3. Wyjątki.

    W ~/etc/ nie muszą (nie powinny) być umieszczone następujące pliki:
    
    .profile
    .login
    .logout
    .bashrc
    .bash_profile
    .bash_history
    .bash_login
    .bash_logout
    .inputrc
    .etc-dir
    
    i inne pliki konfiguracyjne powłok.
    
4. Zgodność.

    Programy, które chcą wprowadzać proponowane udogodnienie powinny zachować
    zgodność w dół. To znaczy, że jeśli nie uda się ustalić alternetywnej
    lokalizacji pliku to korzystamy z lokalizacji domyślnie wymaganej przez
    aplikację.
    
4.1. Ścieżki w plikach konfiguracyjnych.

    Ta sprawa wymaga dyskusji. Na pierwszy rzut oka wydaje się naturalnym
    traktować ./ występujące w pliku umieszczonym w ~/etc/ jak zwyczajną
    ścieżkę względną do katalogu bieżącego procesu. Lecz o wiele łatwiej byłoby
    wprowadzać zmiany, gdybyśmy założyli, że ./ występujące gdzieś w ~/etc/plik
    zawsze odnosi się do katalogu domowego.
    
    Przykładem może być tu znów 'qmail-local', dla którego kropka na początku
    nazwy miejsca, do którego ma dotrzeć przesyłka jest informacją, że 
    wiadomość należy zapisać do pliku (katalogu) umiejscowionego względem
    katalogu domowego. Owszem, można to ominąć podając np.: ../../Mailbox
    ale wymaga to zwiększonego nakładu pracy na modyfikację źródeł programów,
    które zachowują się w podobny sposób, wprowadza także różnice w zawartości
    plików umiejscowionych bezpośrednio w ~ a tych z ~/etc/[dir/]. Dlatego
    moją propozycją jest by traktować ./ występujące w ~/etc/[dir/] jako
    katalog domowy. Pozwoli to zautomatyzować proces wprowadzania w życie
    nowego sposobu rozmieszczania plików konfiguracyjnych.

4.2 Programy niezależne od środowiska użytkownika.
    
    Wprowadzając ~/etc nie da się uniknąć sytuacji, w ktorych przerobić
    trzeba program nie mający styczności ze zmiennymi środowiskowymi 
    użytkownika. Program taki to np. lokalny dostarczyciel poczty,
    którego jedynym działaniem jest uruchomić się na prawach danego użytkownika
    i korzystając z plików konfiguracyjnch (np. ustawień filtracji czy
    lokalnego trasowania poczty) obsłużyć przesyłkę. Musi on w jakiś sposób
    dowiedzieć się o katalogu konfiguracyjnym. Wygodnym rozwiązaniem wydaje się
    przekazanie informacji o zawartości $HOME_ETC jako opcji podanej przy
    wywołaniu. Dlatego właśnie, w przypadku niektórych aplikacji informację 
    o miejscu na pliki konfiguracyjne musi wprowadzić administrator systemu, 
    a odpowiednio przystosowana aplikacja powinna dać mu taką możliwość.

    W tym miejscu widzimy, że nigdy nie uda się uzyskać pełnej elastyczności
    w korzystaniu z katalogu zawierającego pliki konfiguracyjne. :(  
    Możemy teraz stwierdzić, że $HOME_ETC łatwiej użytkownikom narzucić,
    np. w globalnym profilu powłoki.

5. Algorytm uzyskiwania HOME_ETC w łatkach dla programów.

    1	Czy istnieje zmienna środowiskowa $HOME_ETC ?
    
	TAK:  przejdź do (3)
	NIE:  przejdź do (2)
    
    2	Czy istnieje plik o nazwie .etc-dir i istnieje katalog o nazwie
        podanej w jego pierwszej linii tego pliku ?
    
	TAK:  ustaw HOME_ETC i przejdź do (3)
	NIE:  użyj starej metody korzystania z plików konfiguracyjnych
    
    3	Używaj pliku konfiguracji z ~/$HOME_ETC/

6. Inne konfigurowalne katalogi.

    Poza plikami konfiguracyjnymi w katalogu domowym warto też 
    uporządkować sprawę plików i podkatalogów z danymi.
    Zmienna środowiskowa określająca katalog to $DATA_DIR i
    podlega ona takim samym prawom jak $HOME_ETC.

7. Prawa.

    0700 dla ~/etc/ i 0700 dla plików i katalogów wewnątrz (chyba, że 
    wymagają inaczej)

8. Przykładowy kod.

    Odpowiedni plik nagłówkowy z tymi funkcjami znajdziesz w repozytorium CVS:
    
			/home-etc/src/home_etc.h
			
    Przykłady użycia znajdziesz w:
    
			/home-etc/src/example*.c
			
    na cvs.pld-linux.org

9. Biblioteka współdzielona.

    Żeby nie trzeba było robić dużych łatek, które powielają te same
    działania i w których można się pomylić napisałem krótką bibliotekę
    współdzieloną, którą odnaleźć można w CVS w module home-etc, a także
    w pakiecie RPM o nazwie home-etc. Biblioteka ma naprawdę prosty
    interfejs programisty i jeśli chcesz jej użyć dodając funkcjonalność
    mechanizmu HOME-ETC do dowolnej aplikacji to musisz tylko zainstalować
    u siebie pakiet home-etc-devel, połączyć program z biblioteką współdzieloną
    w momencie budowania, a w samym kodzie C dopisać #include <home_etc.h>

    Aby przejrzeć API biblioteki zainstaluj pakiet home-etc-devel, a potem
    zajrzyj do: /usr/include/home_etc.h

    Nie zapomnij o dodaniu BuildRequired: home-etc-devel oraz Requires: home-etc
    do speca pakietu, który modyfikujesz.

    ps:  Mam nadzieję zrobić osobne HOWTO dla tworzących poprawki, które
         dokładniej opisałoby włączanie tego w łatki na konkretnych przykładach,
	 więc w razie czego szukajcie w pakiecie home-etc-devel w sekcji dokumentacji
	 (/usr/share/doc/home-etc-[wersja]).
    
10. Kontakt.

    Jeśli chcesz wyrazić swą opinię, czy wymienić poglądy dotyczące 
    powyższego tematu, wyślij pustą wiadomość na adres:
    
			pld-devel-pl@lists.pld-linux.org

    aby dołączyć do listy dyskusyjnej osób rozwijających PLD.

11. Autorzy.

Autorem tego dokumentu jest		Paweł Wilk <siefca@gnu.org>
Pomysł na osobny katalog z danymi:	Tomasz Kłoczko <kloczek@rudy.mif.pg.gda.pl>
Pomysł na zmienną środowiskową:		Adam Ryba <pooh@gate.pl>
Pomysł na makro w stylu gettext:	Przemek Borys <pborys@dione.ids.pl>
Poprawki/aktualizacja:			Tomasz Orzechowski <orzech@pld-linux.org>
