.\" Copyright (c) 2003 by Pawe³ Wilk <siefca@gnu.org>
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2
.\" or any later version published by the Free Software Foundation;
.\" with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
.\" A copy of the license is included in the section entitled "GNU
.\" Free Documentation License"; if it's not, contact Free Software Foundation, Inc.
.\" 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA to obtain one.
.\"
.TH home_etc_path "3" "PLD Linux/GNU" "December 2003" "HOME-ETC"
.SH NAME
home_etc_path \- pathname reconstructor
.SH SYNOPSIS
.nf
.B #include <home_etc.h>
.sp
.BI "const char *home_etc_path(const char *" pathname ", char " use_env );
.sp
.BI "const char *_HE(const char *" pathname );
.BI "const char *_HEn(const char *" pathname );
.sp
.B #define _HE_DAEMON
.B #include <home_etc.h>
.BI "const char *___HE(const char *" pathname );
.fi
.SH DESCRIPTION
This function rewrites the given \fIpathname\fP according
to the result of \fBget_home_etc_static(3)\fP. It tries to canonize
as much parts of the directories as it is possible in:
pathname, (obtained beforre) home directory, and \fBHOME_ETC\fP.

Substitution is made for the found string of the user's home directory,
which is searched in the pathname. The home-dir part of the string
becomes the value of the \fBHOME_ETC\fP obtained before.
    
The use_env is simply passed to the \fBget_home_etc_static(3)\fP.
    
The function iterates using \fBchdir(2)\fP and \fBgetcwd(3)\fP to canonize parts
of pathnames.
    
\fB_HE\fP is a wrapper for this function, which never returns NULL, since NULL
wasn't given as an argument. It calls \fBhome_etc_path(3)\fP and in case
of failure it simply returns the given \fIpathname\fP. It always sets \fIuse_env\fP
to a non-zero.

\fB_HEn\fP is a wrapper for this function, which never returns NULL, since NULL
wasn't given as an argument. It calls \fBhome_etc_path(3)\fP and in case
of failure it simply returns the given \fIpathname\fP. It always sets \fIuse_env\fP
to zero.

\fB___HE\fP is a wrapper for this function, which never returns NULL, since NULL
wasn't given as an argument. It calls \fBhome_etc_path(3)\fP and in case
of failure it simply returns the given \fIpathname\fP. It doesn't trusts the environment
variables if \fB_HE_DAEMON\fP was defined before including the header file. It trusts
and uses the environment (\fBHOME_ETC\fP and \fBHOME\fP) if the \fB_HE_DAEMON\fP wasn't
defined.

.SH "RETURN VALUE"
This function returns the pointer to a static buffer containing
the newly generated pathname or NULL if something went bad.
    
\fB_HE\fP never returns NULL, since the NULL wasn't given as an argument, in case of
failure it returns its argument.

\fB_HEn\fP never returns NULL, since the NULL wasn't given as an argument, in case of
failure it returns its argument.

.SH EXAMPLES
for HOME=\fI/home/users/siefca\fP
and HOME_ETC=\fI/usr/siefca-configs\fP
.sp    
the function:
.sp
.BI "home_etc_path(" /home/users/siefca/.muttrc ", " 1 );
.sp    
will return
.I /usr/siefca-configs/.muttrc
.LP
And this is an elegant way of use \fB_HE\fP wrapper while
modifying automake/autoconf compliant applications.
Look, it's clear and easy:
.sp
.nf
.ne 12
.ta 8n 16n

    #ifdef HAVE_HOME_ETC_H
    # include <home_etc.h>
    # define __HE(x) _HE(x)
    #else
    # define __HE(x) x
    #endif
    
    ...

    /* was: f = fopen(filename, "r"); */

    f = fopen(__HE(filename), "r");

    ...

.ta
.fi
Other example shows how to use it in daemons, which may become
some users for a while to do some actions using different UID/EUID (see the \fBWARNINGS\fP section below):
.sp
.nf
.ne 12
.ta 8n 16n

    #ifdef HAVE_HOME_ETC_H
    # include <home_etc.h>
    # define __HE(x) _HEn(x)
    #else
    # define __HE(x) x
    #endif

    ...

    /* was: f = fopen(filename, "r"); */
    
    f = fopen(__HE(filename), "r");

    ...

.ta
.fi
Other way to do it:
.sp
.nf
.ne 12
.ta 8n 16n

    #ifdef HAVE_HOME_ETC_H
    # define _HE_DAEMON
    # include <home_etc.h>
    # define __HE(x) ___HE(x)
    #else
    # define __HE(x) x
    #endif

    ...

    /* was: f = fopen(filename, "r"); */
    
    f = fopen(__HE(filename), "r");

    ...

.ta
.fi
And here is part of \fIconfigure.in\fP, which makes a test whether the \fBlibhome_etc\fP can be used:
.sp
.nf
.ne 12
.ta 8n 16n
AC_DEFINE([ENABLE_HOME_ETC],1,[defined if HOME-ETC library is used])

    ...

AC_ARG_WITH(home-etc,
[  --with-home-etc  compile with libhome_etc],
ENABLE_HOME_ETC=$enableval, ENABLE_HOME_ETC=no)
if test "${ENABLE_HOME_ETC}." != "yes."; then
	AM_CONDITIONAL(ENABLE_HOME_ETC, false)
else
	if test "$with_home_etc" != "yes"
	then
	    LDFLAGS="$LDFLAGS -L$with_home_etc/lib"
	fi
	
	AC_CHECK_HEADERS(home_etc.h)
	AC_CHECK_LIB(home_etc, get_home_etc_static,,AC_MSG_ERROR(["libhome_etc not found"]))
	LIBS="$LIBS -lhome_etc"
	AM_CONDITIONAL(ENABLE_HOME_ETC, true)
	AC_DEFINE([ENABLE_HOME_ETC],1,[define whether to use the HOME-ETC library])
fi

.ta
.fi
If you're modifying specfile for RPM package you can use conditional build:
.sp
.nf
.ne 12
.ta 8n 16n

    ...

    %{!?_without_home_etc:BuildRequires:	home-etc-devel >= 1.0.6}
    %{!?_without_home_etc:Requires:		home-etc >= 1.0.6}

    ...

    %build
    %{__aclocal} -I m4
    %{__autoconf}
    %{__automake}
    %configure \\
	--enable-something \\
	--without-something \\
	%{!?_without_home_etc:--with-home-etc} \\
	%{?_without_home_etc:--without-home-etc}

    ...
.ta
.fi

.SH WARNINGS
Be ware of setting \fBuse_env\fP to non-zero for deamons
which can inherit the environment variables at start and
are not setting it again when changing the UID/EUID. These
are daemons, that (so-called) aren't touching users' environment.
In such cases you may get a false results.

The static buffer has a length of a MAXPATHLEN bytes. In case of
a larger strings the NULL is generated while parsing.

If you want the very current informations and need to refresh
the cache used to store the \fBHOME_ETC\fP pathname use \fBhome_etc_reset(3)\fP function
just before \fBhome_etc_path\fP or its wrappers.

.SH "SEE ALSO"
.BR home_etc(3),
.BR home_etc_reset(3),
.BR get_home_etc(3),
.BR get_home_etc_static(3),
.BR chdir(2),
.BR getcwd(3)

.SH LICENSE
The HOME-ETC library is distributed under the terms of GNU LGPL.
This documentation is distributed under the terms of GNU FDL.
       
.SH AUTHOR
Pawel Wilk <siefca@gnu.org>
There was also a lot of other people, who have contributed to this code
and/or helped with patching applications. See the AUTHORS and the CONTRIBUTORS files.

